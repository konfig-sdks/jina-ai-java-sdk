/*
 * The Jina Embedding Serving API
 * This is the UniversalAPI to access all the Jina embedding models
 *
 * The version of the OpenAPI document: 0.0.86
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApiSchemasMultiEmbeddingsTextEmbeddingInput;
import com.konfigthis.client.model.ColbertModelEmbeddingsOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MultiEmbeddingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MultiEmbeddingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MultiEmbeddingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateEmbeddingsCall(ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiSchemasMultiEmbeddingsTextEmbeddingInput;

        // create path and map variables
        String localVarPath = "/v1/multi-embeddings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateEmbeddingsValidateBeforeCall(ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiSchemasMultiEmbeddingsTextEmbeddingInput' is set
        if (apiSchemasMultiEmbeddingsTextEmbeddingInput == null) {
            throw new ApiException("Missing the required parameter 'apiSchemasMultiEmbeddingsTextEmbeddingInput' when calling generateEmbeddings(Async)");
        }

        return generateEmbeddingsCall(apiSchemasMultiEmbeddingsTextEmbeddingInput, _callback);

    }


    private ApiResponse<ColbertModelEmbeddingsOutput> generateEmbeddingsWithHttpInfo(ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput) throws ApiException {
        okhttp3.Call localVarCall = generateEmbeddingsValidateBeforeCall(apiSchemasMultiEmbeddingsTextEmbeddingInput, null);
        Type localVarReturnType = new TypeToken<ColbertModelEmbeddingsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateEmbeddingsAsync(ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput, final ApiCallback<ColbertModelEmbeddingsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateEmbeddingsValidateBeforeCall(apiSchemasMultiEmbeddingsTextEmbeddingInput, _callback);
        Type localVarReturnType = new TypeToken<ColbertModelEmbeddingsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateEmbeddingsRequestBuilder {
        private final String model;
        private final Object input;
        private String inputType;
        private String encodingFormat;

        private GenerateEmbeddingsRequestBuilder(String model, Object input) {
            this.model = model;
            this.input = input;
        }

        /**
         * Set inputType
         * @param inputType Type of the embedding to compute, query or document (optional, default to document)
         * @return GenerateEmbeddingsRequestBuilder
         */
        public GenerateEmbeddingsRequestBuilder inputType(String inputType) {
            this.inputType = inputType;
            return this;
        }
        
        /**
         * Set encodingFormat
         * @param encodingFormat The format in which you want the embeddings to be returned.Possible value are &#x60;float&#x60; and &#x60;base64&#x60;. Defaults to &#x60;float&#x60; (optional)
         * @return GenerateEmbeddingsRequestBuilder
         */
        public GenerateEmbeddingsRequestBuilder encodingFormat(String encodingFormat) {
            this.encodingFormat = encodingFormat;
            return this;
        }
        
        /**
         * Build call for generateEmbeddings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create embeddings </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput = buildBodyParams();
            return generateEmbeddingsCall(apiSchemasMultiEmbeddingsTextEmbeddingInput, _callback);
        }

        private ApiSchemasMultiEmbeddingsTextEmbeddingInput buildBodyParams() {
            ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput = new ApiSchemasMultiEmbeddingsTextEmbeddingInput();
            apiSchemasMultiEmbeddingsTextEmbeddingInput.model(this.model);
            apiSchemasMultiEmbeddingsTextEmbeddingInput.input(this.input);
            if (this.inputType != null)
            apiSchemasMultiEmbeddingsTextEmbeddingInput.inputType(ApiSchemasMultiEmbeddingsTextEmbeddingInput.InputTypeEnum.fromValue(this.inputType));
            if (this.encodingFormat != null)
            apiSchemasMultiEmbeddingsTextEmbeddingInput.encodingFormat(ApiSchemasMultiEmbeddingsTextEmbeddingInput.EncodingFormatEnum.fromValue(this.encodingFormat));
            return apiSchemasMultiEmbeddingsTextEmbeddingInput;
        }

        /**
         * Execute generateEmbeddings request
         * @return ColbertModelEmbeddingsOutput
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create embeddings </td><td>  -  </td></tr>
         </table>
         */
        public ColbertModelEmbeddingsOutput execute() throws ApiException {
            ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput = buildBodyParams();
            ApiResponse<ColbertModelEmbeddingsOutput> localVarResp = generateEmbeddingsWithHttpInfo(apiSchemasMultiEmbeddingsTextEmbeddingInput);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateEmbeddings request with HTTP info returned
         * @return ApiResponse&lt;ColbertModelEmbeddingsOutput&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create embeddings </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ColbertModelEmbeddingsOutput> executeWithHttpInfo() throws ApiException {
            ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput = buildBodyParams();
            return generateEmbeddingsWithHttpInfo(apiSchemasMultiEmbeddingsTextEmbeddingInput);
        }

        /**
         * Execute generateEmbeddings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Create embeddings </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ColbertModelEmbeddingsOutput> _callback) throws ApiException {
            ApiSchemasMultiEmbeddingsTextEmbeddingInput apiSchemasMultiEmbeddingsTextEmbeddingInput = buildBodyParams();
            return generateEmbeddingsAsync(apiSchemasMultiEmbeddingsTextEmbeddingInput, _callback);
        }
    }

    /**
     * Create Multi Embeddings
     * Create embedding representations of the given input texts.
     * @param apiSchemasMultiEmbeddingsTextEmbeddingInput  (required)
     * @return GenerateEmbeddingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create embeddings </td><td>  -  </td></tr>
     </table>
     */
    public GenerateEmbeddingsRequestBuilder generateEmbeddings(String model, Object input) throws IllegalArgumentException {
        if (model == null) throw new IllegalArgumentException("\"model\" is required but got null");
            

        
        return new GenerateEmbeddingsRequestBuilder(model, input);
    }
}
